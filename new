# Environment variables (example)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_KEY=your-service-role-key
OPENAI_API_KEY=your-openai-key (optional, for AI features)
# User Manual - Deploying the Recreated App (Detailed)

1) Supabase setup
   - Sign up at https://supabase.com, Create new project (free tier)
   - From Project > SQL Editor, paste and run supabase_schema.sql
   - From Project > Settings > API, copy the URL and Service Role Key
2) GitHub repo
   - Create a new repo (private if you prefer) and push this project's files
3) Deploy to Netlify (recommended)VITE_API_BASE=http://localhost:4000

FROM node:18-alpine
WORKDIR /app
COPY package.json package-lock.json* ./import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Chatbot from './components/Chatbot';
import './styles.css';
const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_KEY;
if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.warn('SUPABASE_URL or SUPABASE_SERVICE_KEY not set in environment.');
}
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);


exports.handler = async (event) => {
  if (event.httpMethod !== 'DELETE') return { statusCode: 405, body: 'Method Not Allowed' };
  try {
    const params = event.queryStringParameters || {};
    const id = params.id;
    const token = (event.headers && (event.headers.authorization || event.headers.Authorization)) || params.token;
    if (!token) return { statusCode: 401, body: package.jsonpackage.json({ error: 'Unauthorized' }) };
    const sess = await supabase.from('sessions').select('*').eq('id', token).limit(1).single();
    if (!sess.data) return { statusCode: 401, body: JSON.stringify({ error: 'Invalid token' }) };
    const user_id = sess.data.user_id;
    const { data, error } = await supabase.from('entries').delete().eq('id', id).eq('user_id', user_id).select();
    if (error) return { statusCode: 400, body: package.json({ error: error.message }) };
    return { statusCode: 200, body: package.json({ success: true }) };
  } catch (err) {
    return { statusCode: 500, body: package.json({ error: String(err) }) };
  }
};

const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');


